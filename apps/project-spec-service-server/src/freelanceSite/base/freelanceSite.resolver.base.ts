/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FreelanceSite } from "./FreelanceSite";
import { FreelanceSiteCountArgs } from "./FreelanceSiteCountArgs";
import { FreelanceSiteFindManyArgs } from "./FreelanceSiteFindManyArgs";
import { FreelanceSiteFindUniqueArgs } from "./FreelanceSiteFindUniqueArgs";
import { CreateFreelanceSiteArgs } from "./CreateFreelanceSiteArgs";
import { UpdateFreelanceSiteArgs } from "./UpdateFreelanceSiteArgs";
import { DeleteFreelanceSiteArgs } from "./DeleteFreelanceSiteArgs";
import { ProjectFindManyArgs } from "../../project/base/ProjectFindManyArgs";
import { Project } from "../../project/base/Project";
import { FreelanceSiteService } from "../freelanceSite.service";
@graphql.Resolver(() => FreelanceSite)
export class FreelanceSiteResolverBase {
  constructor(protected readonly service: FreelanceSiteService) {}

  async _freelanceSitesMeta(
    @graphql.Args() args: FreelanceSiteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FreelanceSite])
  async freelanceSites(
    @graphql.Args() args: FreelanceSiteFindManyArgs
  ): Promise<FreelanceSite[]> {
    return this.service.freelanceSites(args);
  }

  @graphql.Query(() => FreelanceSite, { nullable: true })
  async freelanceSite(
    @graphql.Args() args: FreelanceSiteFindUniqueArgs
  ): Promise<FreelanceSite | null> {
    const result = await this.service.freelanceSite(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FreelanceSite)
  async createFreelanceSite(
    @graphql.Args() args: CreateFreelanceSiteArgs
  ): Promise<FreelanceSite> {
    return await this.service.createFreelanceSite({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FreelanceSite)
  async updateFreelanceSite(
    @graphql.Args() args: UpdateFreelanceSiteArgs
  ): Promise<FreelanceSite | null> {
    try {
      return await this.service.updateFreelanceSite({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FreelanceSite)
  async deleteFreelanceSite(
    @graphql.Args() args: DeleteFreelanceSiteArgs
  ): Promise<FreelanceSite | null> {
    try {
      return await this.service.deleteFreelanceSite(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Project], { name: "projects" })
  async findProjects(
    @graphql.Parent() parent: FreelanceSite,
    @graphql.Args() args: ProjectFindManyArgs
  ): Promise<Project[]> {
    const results = await this.service.findProjects(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
